<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="conveyor" Id="{247b8935-7e89-4eb6-9a53-2903b8a12848}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK conveyor;

//-------------------------------------------------- Input/Output variables (public) (read/write)
VAR_IN_OUT
	axis:			AXIS_REF;
	// Basic inputs/outputs ( !! MANDATORY !! )
	bReset:			BOOL;	(* reset Toggle *)
END_VAR


//-------------------------------------------------- Input variables (public) (read-only)
VAR_INPUT
	conveyor_direction : MC_Direction;
	rVelocity: 			REAL;
	
	// Basic inputs ( !! MANDATORY !! )
	bNotAus: 		BOOL;
	bEnable: 		BOOL;
END_VAR


//-------------------------------------------------- Output variables (public) (write-only)
VAR_OUTPUT
	isOpen: BOOL;
	isClosed : BOOL;
	
	// Basic signals ( !! MANDATORY !! )
	Busy: 			BOOL := FALSE;			// TRUE, as soon as a command is started, FALSE, as soon as we're done	(REF: https://infosys.beckhoff.com/index.php?content=../content/1031/tcplclibmc2/458439819.html)
	Done: 			BOOL := FALSE;			// TRUE, as soon as we are done (basically inverted busy)				(REF: https://infosys.beckhoff.com/index.php?content=../content/1031/tcplclibmc2/458439819.html)
	Error: 			BOOL := FALSE;			// TRUE, if FB goes to error state; FALSE otherwise
	Home:			BOOL := FALSE;			// (optional) TRUE, if homed, FALSE otherwise
	Ready:			BOOL := FALSE;			// TRUE, if FB is ready to use (i.e. On, Homed,...)
	
	// State information ( !! MANDATORY !! )
	State: 			E_STATE_BLOCK := RESET;
	StateStep: 		UINT := 0;
	LastState:		E_STATE_BLOCK := UNKNOWN;
	LastStateStep: 	UINT := 0;
END_VAR


//-------------------------------------------------- Internal variables (private)
VAR
	MC_Conveyor_Power: MC_Power;						(* Clamp: FB Power *)
	MC_Conveyor_Reset: MC_Reset;						(* Clamp: FB Reset *)
	MC_Conveyor_MoveVelocity: MC_MoveVelocity;
	

	bTrqToHigh : BOOL;
	
	resetError: BOOL;
	isResetted: BOOL;
	
	powerError: BOOL;
	isPowered: BOOL;
	bExecute : BOOL;
	rVelOld : REAL;
	

	
	
	
	// Error signal (internal) ( !! MANDATORY !! )
	bInternalError: BOOL := FALSE;
	
END_VAR


//-------------------------------------------------- Internal constants (private)
VAR CONSTANT
	// CONSTANTS
END_VAR

VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//-------------------------------------------------- Global block-action triggers
axis.ReadStatus();

MC_Conveyor_Power(	Axis:=axis,	Enable:=(bNotAus) AND (bEnable), Enable_Positive:=TRUE, Enable_Negative:=TRUE, Override:=100.0, Status=>isPowered, Error=>powerError );
MC_Conveyor_Reset(	Axis:=axis,	Execute:=bReset, Done=>isResetted, Error=>resetError );

//MC_Conveyor_JogHome( Axis:=axis, JogForward:=bMoveFwd, JogBackwards:=bMoveBwd, Mode:=MC_JOGMODE_CONTINOUS, Error=>jogHomeError, Velocity :=rVelocity );
MC_Conveyor_MoveVelocity(Axis:=axis, Execute:=bExecute, Velocity:=rVelocity, Direction:= MC_Direction.MC_Positive_Direction);





//-------------------------------------------------- State machine
CASE State OF
	//------------------------- RESET (flow)
	RESET:
			CASE StateStep OF
				0:	Busy := SetBusy( TRUE, Update=>Done );
					bInternalError := FALSE;
					Ready := FALSE;
					Home := FALSE;
					LastState := UNKNOWN;
					LastStateStep:= 0;
					StateStep := 99;
					rVelocity :=0;
					
				99:	Busy := SetBusy( FALSE, Update=>Done );
					State := SetState( INIT, Reset=>StateStep );
			END_CASE


	//------------------------- INIT (blocking)
	INIT:
			CASE StateStep OF
				0:	Busy := SetBusy( TRUE, Update=>Done );
					Home := FALSE;
					bExecute := TRUE;
					StateStep := 1;

				1:	Busy := SetBusy( FALSE, Update=>Done );
					
					IF isPowered THEN
						StateStep := 99;
						
					END_IF

				99: Busy := SetBusy( FALSE, Update=>Done );
					State := SetState( RUNNING, Reset=>StateStep );
			END_CASE


	
	//------------------------- RUNNING (blocking) (sort of)
	RUNNING:
			Ready := TRUE;
			
			IF NOT (rVelocity = rVelOld) THEN
				rVelOld := rVelocity;
				bExecute := FALSE;
			ELSE
				bExecute := TRUE;;
			END_IF

			IF NOT isPowered THEN
				bInternalError := TRUE;		
			END_IF
			

	//------------------------- ERROR (blocking)
	FATAL:
			// WE HIT ERROR STATE! Something went seriously wrong, we CAN'T continue!
			// STALLING! Waiting for Reset!


END_CASE

//-------------------------------------------------- Global block-signal triggers

//------------------------- Trigger: RESET ( !!! MANDATORY !!! )
IF bReset THEN
	bInternalError := FALSE;
	Ready := FALSE;
	IF isResetted THEN
		bReset := FALSE;
		State := SetState( RESET, Reset=>StateStep );
	END_IF
END_IF

//------------------------- Trigger: Internal ERROR ( !!! MANDATORY !!! )
IF bInternalError THEN
	Error := TRUE;		
	Busy := FALSE;
	Done := FALSE;
	Home := FALSE;
	Ready := FALSE;
	
	LastState := State;
	LastStateStep := StateStep;
	
	State := SetState( FATAL, Reset=>StateStep );
ELSE
	Error := FALSE;		
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="conveyor">
      <LineId Id="111" Count="4" />
      <LineId Id="357" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="139" Count="12" />
      <LineId Id="480" Count="0" />
      <LineId Id="152" Count="10" />
      <LineId Id="482" Count="0" />
      <LineId Id="163" Count="2" />
      <LineId Id="481" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="168" Count="6" />
      <LineId Id="212" Count="3" />
      <LineId Id="472" Count="0" />
      <LineId Id="474" Count="5" />
      <LineId Id="473" Count="0" />
      <LineId Id="216" Count="39" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>